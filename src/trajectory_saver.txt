#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "visualization_msgs/msg/marker_array.hpp"
#include "trajectory_tools/srv/save_trajectory.hpp"

#include <fstream>
#include <vector>
#include <string>

class TrajectorySaver : public rclcpp::Node
{
public:
    TrajectorySaver() : Node("trajectory_saver")
    {
        odom_sub_ = this->create_subscription<nav_msgs::msg::Odometry>(
            "/odom", 10,
            std::bind(&TrajectorySaver::odomCallback, this, std::placeholders::_1));

        marker_pub_ = this->create_publisher<visualization_msgs::msg::MarkerArray>(
            "/saved_trajectory_markers", 10);

        save_srv_ = this->create_service<trajectory_tools::srv::SaveTrajectory>(
            "save_trajectory",
            std::bind(&TrajectorySaver::saveServiceCallback, this, std::placeholders::_1, std::placeholders::_2));

        RCLCPP_INFO(this->get_logger(), "Trajectory saver node has started.");
    }

private:
    void odomCallback(const nav_msgs::msg::Odometry::SharedPtr msg)
    {
        RCLCPP_INFO(this->get_logger(), "ODOM CALLBACK TRIGGERED");
        geometry_msgs::msg::PoseStamped pose;
        //pose.header = msg->header;
        pose.header.stamp = this->now(); 
        pose.header.frame_id = "odom";
        pose.pose = msg->pose.pose;

        trajectory_.push_back(pose);
        publishMarkers();

        RCLCPP_INFO(this->get_logger(), "Received pose: x=%.2f, y=%.2f, z=%.2f",
                    pose.pose.position.x, pose.pose.position.y, pose.pose.position.z);
    }

    void publishMarkers()
    {
        visualization_msgs::msg::MarkerArray marker_array;
        visualization_msgs::msg::Marker marker;
        marker.header.frame_id = "odom";
        marker.header.stamp = this->now();
        marker.type = visualization_msgs::msg::Marker::SPHERE_LIST;
        marker.action = visualization_msgs::msg::Marker::ADD;
        marker.scale.x = 0.05;
        marker.scale.y = 0.05;
        marker.scale.z = 0.05;
        marker.color.r = 1.0;
        marker.color.g = 0.0;
        marker.color.b = 0.0;
        marker.color.a = 1.0;
        marker.id = 0;

        for (const auto &pose : trajectory_)
        {
            geometry_msgs::msg::Point p;
            p.x = pose.pose.position.x;
            p.y = pose.pose.position.y;
            p.z = pose.pose.position.z;
            marker.points.push_back(p);
        }

        marker_array.markers.push_back(marker);
        marker_pub_->publish(marker_array);
    }

    void saveServiceCallback(
        const std::shared_ptr<trajectory_tools::srv::SaveTrajectory::Request> request,
        std::shared_ptr<trajectory_tools::srv::SaveTrajectory::Response> response)
    {
        rclcpp::Time now = this->now();
        std::vector<geometry_msgs::msg::PoseStamped> filtered;

        for (const auto &pose : trajectory_)
	{
    	    //auto pose_time = rclcpp::Time(pose.header.stamp);
    	    rclcpp::Time pose_time(pose.header.stamp);
            if ((now - pose_time).seconds() <= request->duration_sec)
            {
                filtered.push_back(pose);
            }
        }
        
        RCLCPP_INFO(this->get_logger(), "Trajectory points total: %zu", trajectory_.size());
        RCLCPP_INFO(this->get_logger(), "Filtered (last %.1f sec): %zu", request->duration_sec, filtered.size());

        std::ofstream file(request->filename, std::ios::out);
        if (!file.is_open())
        {
            response->success = false;
            response->message = "Failed to open file: " + request->filename;
            return;
        }

        for (const auto &pose : filtered)
        {
            file << pose.header.stamp.sec << "." << pose.header.stamp.nanosec << ","
                 << pose.pose.position.x << "," << pose.pose.position.y << ","
                 << pose.pose.position.z << "\n";
        }

        file.close();
        response->success = true;
        response->message = "Trajectory saved to: " + request->filename;
        RCLCPP_INFO(this->get_logger(), "%s", response->message.c_str());
    }

    rclcpp::Subscription<nav_msgs::msg::Odometry>::SharedPtr odom_sub_;
    rclcpp::Publisher<visualization_msgs::msg::MarkerArray>::SharedPtr marker_pub_;
    rclcpp::Service<trajectory_tools::srv::SaveTrajectory>::SharedPtr save_srv_;
    std::vector<geometry_msgs::msg::PoseStamped> trajectory_;
};

int main(int argc, char *argv[])
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<TrajectorySaver>());
    rclcpp::shutdown();
    return 0;
}                                                                                  